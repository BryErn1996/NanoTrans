<Window
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:local="clr-namespace:NanoTrans"
    xmlns:core="clr-namespace:TranscriptionCore;assembly=TranscriptionCore"
    xmlns:props="clr-namespace:NanoTrans.Properties"
        
        xmlns:lex="http://wpflocalizeextension.codeplex.com"
    xmlns:diag="clr-namespace:System.Diagnostics;assembly=WindowsBase" xmlns:d="http://schemas.microsoft.com/expression/blend/2008" xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" mc:Ignorable="d" x:Class="NanoTrans.Window1"
        lex:LocalizeDictionary.DesignCulture="cs"
        lex:LocalizeDictionary.IncludeInvariantCulture="False"
        lex:ResxLocalizationProvider.DefaultAssembly="NanoTrans"
        lex:ResxLocalizationProvider.DefaultDictionary="Strings"
        
    Title="NanoTrans" Height="758" Width="867" Closing="Window_Closing"
    ResizeMode="CanResizeWithGrip" Loaded="Window_Loaded" WindowStartupLocation="CenterScreen" PreviewKeyUp="Window_PreviewKeyUp" Icon="../icons/pen.ico" IsEnabled="True" AllowDrop="True" Drop="Window_Drop"
    MouseDown="Window_MouseDown"
    Name="window"
        DataContext="{Binding RelativeSource={RelativeSource Self}}"
        >
    <Window.Resources>
        <BooleanToVisibilityConverter x:Key="visConverter" />
        <local:DoubleGridLengthConverter x:Key="gridlConverter" />

        <Style TargetType="{x:Type Button}" x:Key="{x:Static ToolBar.ButtonStyleKey}">
            <Style.Resources>
                <Style TargetType="{x:Type Image}">
                    <Style.Triggers>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Opacity" Value="0.5" />
                        </Trigger>
                    </Style.Triggers>
                </Style>
            </Style.Resources>
        </Style>

    </Window.Resources>
    <Grid>
        <Grid.RowDefinitions>
            <RowDefinition Height="auto" />
            <RowDefinition Height="*"/>
            <RowDefinition Height="auto"/>
            <RowDefinition Height="auto" />
            <RowDefinition Height="160"/>
            <RowDefinition Height="auto"/>
        </Grid.RowDefinitions>
        <StackPanel Orientation="Vertical" Grid.ColumnSpan="2" Grid.Row="0">
            <Menu Name="menu1" Height="22" VerticalAlignment="Top" HorizontalAlignment="Stretch">
                <MenuItem Header="{lex:Loc}" Focusable="True" Tag="10" Name="menuFile">
                    <MenuItem Header="{lex:Loc}" InputGestureText="Ctrl+N" Click="MFile_new_Click" Name="menuFileNewTranscription"  Visibility="{Binding FeatureEnabler.LocalEdit, Converter={StaticResource visConverter}, Source={x:Static props:Settings.Default}}">
                        <MenuItem.Icon>
                            <Image Source="/icons/iNovy.png"/>
                        </MenuItem.Icon>
                    </MenuItem>

                    <MenuItem Header="{lex:Loc}" InputGestureText="Ctrl+O" Name="menuFileOpenTranscription" Click="MFile_open_Click" Visibility="{Binding FeatureEnabler.LocalEdit, Converter={StaticResource visConverter}, Source={x:Static props:Settings.Default}}">
                        <MenuItem.Icon>
                            <Image Source="/icons/iOtevrit.png"/>
                        </MenuItem.Icon>
                    </MenuItem>
                    <Separator Visibility="{Binding FeatureEnabler.LocalEdit, Converter={StaticResource visConverter}, Source={x:Static props:Settings.Default}}"/>
                    <MenuItem Header="{lex:Loc}" InputGestureText="Ctrl+S" Click="MFile_save_Click" Name="menuFileSave">
                        <MenuItem.Icon>
                            <Image Source="/icons/iUlozit.png"/>
                        </MenuItem.Icon>
                    </MenuItem>
                    <MenuItem Header="{lex:Loc}" Click="MFile_save_as_Click" Name="menuFileSaveAs" Visibility="{Binding FeatureEnabler.LocalEdit, Converter={StaticResource visConverter}, Source={x:Static props:Settings.Default}}" />
                    <Separator Visibility="{Binding FeatureEnabler.Export, Converter={StaticResource visConverter}, Source={x:Static props:Settings.Default}}"/>
                    <MenuItem Header="{lex:Loc}" Name="menufileExport" Click="menuFileExport_Click" Visibility="{Binding FeatureEnabler.Export, Converter={StaticResource visConverter}, Source={x:Static props:Settings.Default}}"/>

                    <MenuItem Header="{lex:Loc}" Name="menuFileImport" Click="menuFileImport_Click" Visibility="{Binding FeatureEnabler.LocalEdit, Converter={StaticResource visConverter}, Source={x:Static props:Settings.Default}}"/>
                    <MenuItem Header="{lex:Loc}" Click="MFile_open_audio_Click" Name="menufileOpenAudio" Visibility="{Binding FeatureEnabler.AudioManipulation, Converter={StaticResource visConverter}, Source={x:Static props:Settings.Default}}">
                        <MenuItem.Icon>
                            <Image Source="/icons/iAudio.png"/>
                        </MenuItem.Icon>
                    </MenuItem>
                    <MenuItem Header="{lex:Loc}" Click="Mfile_open_video_Click" Name="menuFileOpenVideo" Visibility="{Binding FeatureEnabler.VideoFrame, Converter={StaticResource visConverter}, Source={x:Static props:Settings.Default}}"/>

                    <Separator />
                    <MenuItem Header="{lex:Loc}" Click="MFile_close_Click" Name="menuFileExit" />
                </MenuItem>
                <MenuItem Header="{lex:Loc}" Name="menuEdit" Visibility="{Binding FeatureEnabler.ChaptersAndSections, Converter={StaticResource visConverter}, Source={x:Static props:Settings.Default}}">
                    <MenuItem Header="{lex:Loc mainWindowUndoText}" InputGestureText="Ctrl+Z" Name="menuEditUndo" Click="menuEditUndo_Click" >
                        <MenuItem.Style>
                            <Style TargetType="MenuItem">
                                <Style.Triggers>
                                    <DataTrigger Binding="{Binding ElementName=window, Path=Transcription.UndoStack.Count}" Value="0">
                                        <Setter Property="IsEnabled" Value="False" />
                                    </DataTrigger>
                                </Style.Triggers>
                            </Style>
                        </MenuItem.Style>
                    </MenuItem>
                    <MenuItem Header="{lex:Loc mainWindowRedoText}" InputGestureText="Ctrl+Shift+Z" Name="menuEditRedo" Click="menuEditRedo_Click" >
                        <MenuItem.Style>
                            <Style TargetType="MenuItem">
                                <Style.Triggers>
                                    <DataTrigger Binding="{Binding ElementName=window, Path=Transcription.RedoStack.Count}" Value="0">
                                        <Setter Property="IsEnabled" Value="False" />
                                    </DataTrigger>
                                </Style.Triggers>
                            </Style>
                        </MenuItem.Style>
                    </MenuItem>

                    <Separator />
                    <MenuItem Header="{lex:Loc}" InputGestureText="F4"  Click="MEdit_new_chapter_Click" Name="menuEditNewChapter"/>
                    <MenuItem Header="{lex:Loc}" InputGestureText="F5" Click="MEdit_New_Section_Click" Name="menuEditNewSection" />
                    <Separator />
                    <MenuItem Header="{lex:Loc}" InputGestureText="Shift+Del" Click="MEdit_Delete_Element_Click" Name="menuEditDeleteElement" />
                    <Separator />
                    <MenuItem Header="{lex:Loc}"  Click="menuToolsDeleteNonSpeechEvents_Click" Name="menuEditDeleteNonSpeechEvents" />
                </MenuItem>

                <MenuItem Header="{lex:Loc}" Tag="20" Name="menuTools">
                    <MenuItem Header="{lex:Loc}" InputGestureText="Ctrl+M" Click="MTools_Set_Speaker_Click" Name="menuToolsSetSpeaker">
                        <MenuItem.Icon>
                            <Image Source="/icons/iMluvci1.png"/>
                        </MenuItem.Icon>
                    </MenuItem>
                    <MenuItem Header="{lex:Loc}" Name="menuToolsFonetics" Visibility="{Binding FeatureEnabler.PhoneticEditation, Converter={StaticResource visConverter}, Source={x:Static props:Settings.Default}}">
                        <MenuItem Header="Zobrazit fonetický přepis" Click="menuItemShowPanelFoneticTranscription_Click" Name="menuToolsFoneticsShow" />
                    </MenuItem>

                    <MenuItem Header="{lex:Loc}" Name="menuToolsVideo" Visibility="{Binding FeatureEnabler.VideoFrame, Converter={StaticResource visConverter}, Source={x:Static props:Settings.Default}}">
                        <MenuItem Header="{lex:Loc}" Click="menuToolsShowVideoFrame_Click" Name="menuToolsVideoShow"/>
                    </MenuItem>

                    <Separator/>
                    <MenuItem Header="{lex:Loc}" Click="MTools_Settings_Click" Name="menuToolsSettings">
                        <MenuItem.Icon>
                            <Image Source="/icons/iNastaveni.png"/>
                        </MenuItem.Icon>
                    </MenuItem>

                </MenuItem>

                <MenuItem Header="{lex:Loc}" Name="menuHelp">
                    <MenuItem Header="{lex:Loc}" InputGestureText="F1" Click="MHelp_Details_Click" Name="menuHelpHelp">
                        <MenuItem.Icon>
                            <Image Source="/icons/iTip.png"/>
                        </MenuItem.Icon>
                    </MenuItem>
                    <Separator/>
                    <MenuItem Header="{lex:Loc}" InputGestureText="Ctrl+F1" Click="MHelp_about_Click" Name="menuHelpAbout" />
                </MenuItem>
            </Menu>
            <Grid HorizontalAlignment="Stretch">
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="auto"/>
                    <ColumnDefinition/>
                    <ColumnDefinition/>
                </Grid.ColumnDefinitions>
                <ToolBarTray Grid.Column="0" Name="toolBarTray2">
                    <ToolBar Name="toolBarNSE" VerticalAlignment="Top" HorizontalAlignment="Left" Loaded="toolBar1_Loaded" BandIndex="0" Visibility="{Binding FeatureEnabler.NonSpeechEvents, Converter={StaticResource visConverter}, Source={x:Static props:Settings.Default}}"/>
                    <ToolBar BandIndex="1" Name="toolbarAdditional">
                        <Button Click="Button_Click_2" VerticalAlignment="Stretch" ToolTip="{lex:Loc Key=mainWindowOpenSpeakerSynchronizerTooltip}" Visibility="{Binding FeatureEnabler.DbMerging, Converter={StaticResource visConverter}, Source={x:Static props:Settings.Default}}">
                            <Image Source="/icons/join.png" Width="16" Height="16"/>
                        </Button>
                        <ToggleButton Name="Button_HideNSE" VerticalAlignment="Stretch" Click="Button_HideNSE_Click" ClickMode="Press" Visibility="{Binding FeatureEnabler.NonSpeechEvents, Converter={StaticResource visConverter}, Source={x:Static props:Settings.Default}}">
                            <Image Source="/icons/HideNSE.png" Width="16" Height="16" ToolTip="{lex:Loc Key=mainWindowHideNonSpeechEventsTooltip}"/>
                        </ToggleButton>
                    </ToolBar>
                    <ToolBar Name="toolbarQuickNavigation" BandIndex="2" Visibility="{Binding FeatureEnabler.QuickNavigation, Converter={StaticResource visConverter}, Source={x:Static props:Settings.Default}}">
                        <Button VerticalAlignment="Stretch" DataContext="{Binding ElementName=window}" IsEnabled="{Binding IsPreviousTranscriptionAvailable, ElementName=window}" Click="Button_Click_1">
                            <Button.ToolTip>
                                <ToolTip>
                                    <TextBlock>
                                        <TextBlock.Text>
                                            <MultiBinding StringFormat="{}{0}: {1}">
                                                <lex:BLoc Key="NanoTrans:Strings:mainWindowPreviousTranscriptionTooltip"/>
                                                <Binding Path="PlacementTarget.DataContext.PreviousTranscriptionName" RelativeSource="{RelativeSource AncestorType={x:Type ToolTip}}"/>
                                            </MultiBinding>
                                        </TextBlock.Text>
                                    </TextBlock>
                                </ToolTip>
                            </Button.ToolTip>
                            <Image Source="/icons/direction_left.png" Width="16" Height="16"/>
                        </Button>
                        <Button VerticalAlignment="Stretch" DataContext="{Binding ElementName=window}" IsEnabled="{Binding IsNextTranscriptionAvailable, ElementName=window}" Click="Button_Click_3">
                            <Button.ToolTip>
                                <ToolTip>
                                    <TextBlock>
                                        <TextBlock.Text>
                                            <MultiBinding StringFormat="{}{0}: {1}">
                                                <lex:BLoc Key="NanoTrans:Strings:mainWindowNextTranscriptionTooltip"/>
                                                <Binding Path="PlacementTarget.DataContext.NextTranscriptionName" RelativeSource="{RelativeSource AncestorType={x:Type ToolTip}}"/>
                                            </MultiBinding>
                                        </TextBlock.Text>
                                    </TextBlock>
                                </ToolTip>
                            </Button.ToolTip>
                            <Image Source="/icons/direction_right.png" Width="16" Height="16"/>
                        </Button>
                        <ComboBox MaxWidth="300" ItemsSource="{Binding TranscriptionList, ElementName=window}" SelectedIndex="{Binding TranscriptionIndex, ElementName=window}" SelectionChanged="ComboBox_SelectionChanged" IsEditable="True" IsReadOnly="True"/>
                    </ToolBar>
                    <ToolBar Name="toolbarUndo" BandIndex="2">
                        <Button Name="button_back" Click="button_back_Click" ToolTip="{lex:Loc mainWindowUndoText}">
                            <Button.Style>
                                <Style TargetType="Button" BasedOn="{StaticResource ResourceKey={x:Static ToolBar.ButtonStyleKey}}">
                                    <Style.Triggers>
                                        <DataTrigger Binding="{Binding ElementName=window, Path=Transcription.UndoStack.Count}" Value="0">
                                            <Setter Property="IsEnabled" Value="False" />
                                        </DataTrigger>
                                    </Style.Triggers>
                                </Style>
                            </Button.Style>
                            <Image Source="/icons/undo.png"/>
                        </Button>
                        <Button  Name="button_forward" Click="button_forward_Click" ToolTip="{lex:Loc mainWindowRedoText}">
                            <Button.Style>
                                <Style TargetType="Button" BasedOn="{StaticResource ResourceKey={x:Static ToolBar.ButtonStyleKey}}">
                                    <Style.Triggers>
                                        <DataTrigger Binding="{Binding ElementName=window, Path=Transcription.RedoStack.Count}" Value="0">
                                            <Setter Property="IsEnabled" Value="False" />
                                        </DataTrigger>
                                    </Style.Triggers>
                                </Style>
                            </Button.Style>
                            <Image Source="/icons/redo.png"/>
                        </Button>
                    </ToolBar>
                </ToolBarTray>

                <Border HorizontalAlignment="Left" Grid.Column="1" Visibility="{Binding FeatureEnabler.QuickExport, Converter={StaticResource visConverter}, Source={x:Static props:Settings.Default}}">
                    <Grid>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="auto"/>
                            <ColumnDefinition Width="*"/>
                            <ColumnDefinition Width="auto"/>
                            <ColumnDefinition Width="auto"/>
                        </Grid.ColumnDefinitions>
                        <Label Content="{lex:Loc Key=SavePathName}" Grid.Column="0"/>
                        <TextBlock VerticalAlignment="Center" Name="tbQuickSavePath" TextTrimming="CharacterEllipsis" Grid.Column="1"/>
                        <TextBlock VerticalAlignment="Center" Name="tbQuickSaveName" TextTrimming="CharacterEllipsis" Grid.Column="2"/>
                        <Button Click="Button_Click_4" ToolBar.OverflowMode="Never" Grid.Column="3" Content="sp"/>
                    </Grid>
                </Border>

            </Grid>
        </StackPanel>
        <Grid Margin="0,5,0,5" Name="gListVideo" Grid.ColumnSpan="2" Grid.Row="1">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="*" />
                <ColumnDefinition Width="auto" />
                <ColumnDefinition Width="{Binding VideoPanelWidth, Converter={StaticResource gridlConverter}, Mode=TwoWay, Source={x:Static props:Settings.Default}}" />
            </Grid.ColumnDefinitions>
            <local:SubtitlesVizualizer Grid.Column="0" x:Name="VirtualizingListBox" Background="#FF7DAF7D" ClipToBounds="False" Transcription="{Binding Transcription, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type local:Window1}}}" ChangeSpeaker="VirtualizingListBox_ChangeSpeaker" SelectedElementChanged="VirtualizingListBox_SelectedElementChanged" SetTimeRequest="VirtualizingListBox_SetTimeRequest" PlayPauseRequest="VirtualizingListBox_PlayPauseRequest">
                <local:SubtitlesVizualizer.ContextMenu>
                    <ContextMenu>
                        <MenuItem Header="{lex:BLoc Key=NanoTrans:Strings:TranscriptionContextMenuSetSpeaker}" InputGestureText="Ctrl+M" Click="menuItemX_SetSpeaker_Click"/>
                        <Separator />
                        <MenuItem Header="{lex:BLoc Key=NanoTrans:Strings:TranscriptionContextMenuNewChapter}" InputGestureText="F4" Click="menuItemX3_NewChapter_Click"/>
                        <MenuItem Header="{lex:BLoc Key=NanoTrans:Strings:TranscriptionContextMenuNewSection}" InputGestureText="F5" Click="menuItemX2_NewSection_Click"/>
                        <MenuItem Header="{lex:BLoc Key=NanoTrans:Strings:TranscriptionContextMenuNewSectionAtPosition}" InputGestureText="Shift+F5" Click="menuItemX2b_newSectionAtPosition_Click"/>
                        <Separator />
                        <MenuItem Header="{lex:BLoc Key=NanoTrans:Strings:TranscriptionContextMenuDeleteElement}"  Click="menuItemX4_DeleteElement_Click"/>
                        <Separator />
                        <MenuItem Header="{lex:BLoc Key=NanoTrans:Strings:TranscriptionContextMenuExport}" Click="menuItemX7_ExportElement_Click"/>
                        <Separator />
                        <MenuItem Header="{lex:BLoc Key=NanoTrans:Strings:TranscriptionContextMenuAdd50ms}" Click="menuItemX8_add50msClick"/>
                        <MenuItem Header="{lex:BLoc Key=NanoTrans:Strings:TranscriptionContextMenuSubstract50ms}" Click="menuItemX9_substract50msClick"/>
                        <Separator />
                        <MenuItem Header="{lex:BLoc Key=NanoTrans:Strings:ContextMenuLanguageHeader}" ItemsSource="{x:Static core:Speaker.Langs}">
                            <MenuItem.ItemContainerStyle>
                                <Style TargetType="{x:Type MenuItem}">
                                    <Setter Property="Header" Value="{Binding}"/>
                                    <EventSetter Event="MenuItem.Click" Handler="MenuItemLanguage_Click"/>
                                </Style>
                            </MenuItem.ItemContainerStyle>
                        </MenuItem>
                    </ContextMenu>
                </local:SubtitlesVizualizer.ContextMenu>
            </local:SubtitlesVizualizer>
            <GridSplitter Grid.Column="1" Width="5" ResizeBehavior="PreviousAndNext" Focusable="False" IsTabStop="False" ShowsPreview="True" Visibility="{Binding Visibility, ElementName=infoPanels}"/>
            <TabControl Grid.Column="2" Name="infoPanels" SelectedIndex="0" Focusable="False" Visibility="{Binding VideoPanelVisible, Converter={StaticResource visConverter}, Source={x:Static props:Settings.Default}}">
                <TabItem Name="infoPanelsVideo">
                    <TabItem.Header>
                        <StackPanel Orientation="Horizontal">
                            <Image Height="18" Source="/icons/avi.jpg" />
                            <TextBlock Text="{lex:Loc}" Margin="2,0,0,0" VerticalAlignment="Center" Name="infoPanelsVideoHeader" />
                        </StackPanel>
                    </TabItem.Header>
                    <Grid Grid.Column="1" Name="grid2" HorizontalAlignment="Stretch" Focusable="False">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="*"/>
                            <ColumnDefinition Width="50"/>
                        </Grid.ColumnDefinitions>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="*"/>
                            <RowDefinition Height="auto"/>
                        </Grid.RowDefinitions>

                        <Grid Name="gVideoPouze" Background="Black" Grid.Row="0" Grid.ColumnSpan="2">
                            <Grid.ContextMenu>
                                <ContextMenu>
                                    <MenuItem Header="{lex:BLoc Key=NanoTrans:Strings:VideoContextMenuTakeSnapshot}" Click="menuItemVideoTakePicture_Click"/>
                                </ContextMenu>
                            </Grid.ContextMenu>
                            <MediaElement Name="meVideo" LoadedBehavior="Manual" Stretch="Uniform" IsMuted="True" />
                        </Grid>

                        <Button Height="20" Margin="0,2,0,0" Name="btCloseVideo" VerticalAlignment="Top" Padding="0,0,1,1" Click="btCloseVideo_Click" HorizontalAlignment="Right" Width="20" Focusable="False" IsTabStop="False" Grid.Column="1" Content="X"/>

                        <TextBox Name="tbVideoFile" Background="LightGoldenrodYellow" IsReadOnly="True" IsEnabled="True" Focusable="False" IsTabStop="False" Height="25" VerticalAlignment="Bottom" Grid.Row="1" Grid.Column="0"/>
                        <Button Name="btOpenVideo" Click="button6_Click" Height="24" VerticalAlignment="Bottom" Focusable="False" IsTabStop="False" HorizontalAlignment="Right" Width="44" Grid.Row="1" Grid.Column="1">
                            <StackPanel Orientation="Horizontal">
                                <Image Source="/icons/iOtevrit.png"/>
                                <TextBlock Text="..." Margin="2,0,0,0" VerticalAlignment="Center" />
                            </StackPanel>
                        </Button>
                    </Grid>
                </TabItem>

            </TabControl>
        </Grid>

        <GridSplitter Margin="0,0,0,0" Name="gridSplitter1" Height="5" VerticalAlignment="Bottom" Grid.Row="1" Focusable="False" IsTabStop="False" 
			Grid.IsSharedSizeScope="False" HorizontalContentAlignment="Stretch" HorizontalAlignment="Stretch" ResizeBehavior="CurrentAndNext" ShowsPreview="True" Grid.ColumnSpan="2" 
			Visibility="{Binding Visibility, ElementName=gphoneticTranscription}"
                      />
        <Grid Name="gphoneticTranscription" Grid.Row="2" Margin="0,0,0,8" Grid.ColumnSpan="2"
			Visibility="{Binding PhoneticsPanelVisible, Converter={StaticResource visConverter}, Source={x:Static props:Settings.Default}}" >
            <Grid VerticalAlignment="Stretch">
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="*"/>
                    <ColumnDefinition Width="21"/>
                </Grid.ColumnDefinitions>
                <Border Grid.Column="0" BorderThickness="1" BorderBrush="LightBlue" VerticalAlignment="Stretch">
                    <local:Element x:Name="phoneticTranscription" IsEnabled="False" VerticalAlignment="Stretch" MinHeight="70"/>
                </Border>
                <Button HorizontalAlignment="Right" Focusable="False" Height="20" IsTabStop="False" Padding="0,0,1,1" Width="20" VerticalAlignment="Top" x:Name="btZavritFonPrepis" Click="btClosePhoneticsPanel_Click" Grid.Column="1" Content="X"/>
            </Grid>
        </Grid>


        <GroupBox Header="{lex:Loc}" Name="mainWindowAudioPanelHeader" Grid.Row="3" VerticalAlignment="Top" Grid.ColumnSpan="2" Visibility="{Binding FeatureEnabler.AudioManipulation, Converter={StaticResource visConverter}, Source={x:Static props:Settings.Default}}">
            <Grid>
                <StackPanel Orientation="Horizontal">
                    <ToolBarTray  Name="toolBarTray1" VerticalAlignment="Top" HorizontalAlignment="Left">
                        <ToolBar>
                            <Button Click="ToolBar2BtnPlus_Click" Focusable="False" IsTabStop="False" Name="ToolBar2BtnPlus" ToolTip="{lex:Loc Key=mainWindowWaveformHeightIn}">
                                <Image Source="/icons/iPlus.png" />
                            </Button>
                            <Button Click="ToolBar2BtnMinus_Click" Focusable="False" IsTabStop="False" Name="ToolBar2BtnMinus" ToolTip="{lex:Loc Key=mainWindowWaveformHeightOut}">
                                <Image Source="/icons/iMinus.png" />
                            </Button>
                            <ToggleButton Click="ToolBar2BtnAuto_Click" IsChecked="True" Focusable="False" IsTabStop="False" Name="ToolBar2BtnAuto" ToolTip="{lex:Loc Key=mainWindowWaveformHeightAuto}" ClickMode="Press">
                                <Image Source="/icons/iAutoSize.png" />
                            </ToggleButton>
                            <ToggleButton IsChecked="False" Name="ToolBar2BtnSlow" ToolTip="{lex:Loc Key=mainWindowWaveformSlowPlayback}">
                                <Image Source="/NanoTrans;component/icons/isnail.png" />
                            </ToggleButton>
                        </ToolBar>
                        <ToolBar>
                            <ToggleButton Name="TB5" Click="Toolbar1Btn5_Click" Focusable="False" IsTabStop="False" Tag="5000" Content="5s"/>
                            <ToggleButton Name="TB10" Click="Toolbar1Btn5_Click" IsTabStop="False" Focusable="False" Tag="10000" Content="10s"/>
                            <ToggleButton Name="TB20" Click="Toolbar1Btn5_Click" Focusable="False" IsTabStop="False" Tag="20000" Content="20s"/>
                            <ToggleButton Name="TB30" Click="Toolbar1Btn5_Click" Focusable="False" IsTabStop="False" Tag="30000" IsChecked="True" Content="30s"/>
                            <ToggleButton Name="TB60" Click="Toolbar1Btn5_Click" Focusable="False" IsTabStop="False" Tag="60000" Content="1m"/>
                            <ToggleButton Name="TB120" Click="Toolbar1Btn5_Click" Focusable="False" IsTabStop="False" Tag="120000" Content="2m"/>
                            <ToggleButton Name="TB180" Click="Toolbar1Btn5_Click" Focusable="False" IsTabStop="False" Tag="180000" Content="3m"/>
                        </ToolBar>
                    </ToolBarTray>
                    <TextBox Name="tbAudioFile" Background="LightGoldenrodYellow" IsReadOnly="False" IsEnabled="True"  Focusable="True" IsTabStop="True" MinWidth="250" MaxWidth="400" />
                    <Button Name="loadAudioButton" Click="button1_Click" VerticalAlignment="Top" Focusable="False" IsTabStop="False" HorizontalAlignment="Left">
                        <StackPanel Orientation="Horizontal">
                            <TextBlock Margin="4" Name="mainWindowLoadAudioButtonText" Text="{lex:Loc}"/>
                            <Image Margin="0,2,0,0" Source="/icons/iOtevrit.png" StretchDirection="DownOnly" />
                        </StackPanel>
                    </Button>
                </StackPanel>
            </Grid>
        </GroupBox>

        <local:WaveForm x:Name="waveform1" PlayPauseClick="waveform1_PlayPauseClick" 
			SliderPositionChanged="waveform1_SliderPositionChanged"
			CaretPostionChangedByUser="waveform1_CaretPostionChangedByUser" ParagraphClick="waveform1_ParagraphClick" 
			ParagraphDoubleClick="waveform1_ParagraphDoubleClick" CaretPostionChanged="waveform1_CaretPostionChanged" 
			Transcription="{Binding Transcription, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type local:Window1}}}" 
			SmallJump="{Binding WaveformSmallJump, Source={x:Static props:Settings.Default}}"
			Grid.ColumnSpan="2"
			Grid.Row="4">
            <local:WaveForm.ContextMenu>
                <ContextMenu>
                    <MenuItem Header="{lex:BLoc Key=NanoTrans:Strings:WaveformContextMenuSetStart}" InputGestureText="Ctrl+Home" Click="menuItemVlna1_SetStart_Click"/>
                    <MenuItem Header="{lex:BLoc Key=NanoTrans:Strings:WaveformContextMenuSetEnd}" InputGestureText="Ctrl+End" Click="menuItemVlna1_SetEnd_Click" />
                    <Separator/>
                    <MenuItem Header="{lex:BLoc Key=NanoTrans:Strings:WaveformContextMenuSetSelection}" InputGestureText="Ctrl+Space" Click="menuItemVlna1_SetSelection_Click" />
                    <Separator/>
                    <MenuItem Header="{lex:BLoc Key=NanoTrans:Strings:WaveformContextMenuSetStartToCursor}" Click="menuItemWave1_SetStartToCursor_Click" />
                </ContextMenu>
            </local:WaveForm.ContextMenu>
        </local:WaveForm>

        <StatusBar Name="statusBar1" VerticalAlignment="Bottom" Grid.Row="5" HorizontalAlignment="Stretch" Grid.ColumnSpan="2">
            <StatusBar.ItemsPanel>
                <ItemsPanelTemplate>
                    <Grid>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="*"/>
                        </Grid.RowDefinitions>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="4*"/>
                            <ColumnDefinition Width="Auto"/>
                            <ColumnDefinition Width="Auto"/>
                            <ColumnDefinition Width="Auto"/>
                            <ColumnDefinition Width="Auto"/>
                        </Grid.ColumnDefinitions>
                    </Grid>
                </ItemsPanelTemplate>
            </StatusBar.ItemsPanel>

            <StatusBarItem>
                <TextBlock Name="tbProgramStatus"/>
            </StatusBarItem>
            <StatusBarItem Grid.Column="3" Margin="1,1,15,1">
                <ProgressBar Margin="1,1,1,1" Name="pbStatusbarBrogress" Value="0" Width="150" Height="15" Foreground="GreenYellow" ToolTip="{lex:Loc Key=mainWindowStatusbarAudioConversionTooltip}" Visibility="Hidden" />
            </StatusBarItem>
            <StatusBarItem Grid.Column="2">
                <TextBlock Visibility="Hidden" Name="mainWindowStatusbarAudioConversionHeader" Text="{lex:Loc}"/>
            </StatusBarItem>

        </StatusBar>
    </Grid>

</Window>
